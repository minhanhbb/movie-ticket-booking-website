import React, { useEffect, useState } from "react";
import { Link, useLocation, useParams } from "react-router-dom";
import { notification, Modal } from "antd";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faStar } from "@fortawesome/free-solid-svg-icons";
import { stripHtml } from '../../assets/Font/quillConfig';
import "./MovieDetail.css";
import Header from "../Header/Hearder";
import { useMovieContext } from "../../Context/MoviesContext";
import instance from "../../server";
import { format } from 'date-fns';
const MovieDetail: React.FC = () => {
  const { slug } = useParams(); // S·ª≠ d·ª•ng slug
  const location = useLocation();
  const { state, fetchMovies } = useMovieContext();
  const [userStatus, setUserStatus] = useState({
    isLoggedIn: false,
    isFavorite: false,
    isRated: false,
    favoriteMovies: [] as any[],
  });
  const [ratingData, setRatingData] = useState({
    rating: 0,
    review: "",
    isModalVisible: false,
  });
  const [isTrailerVisible, setIsTrailerVisible] = useState(false);

  // T√¨m phim d·ª±a tr√™n slug thay v√¨ id
  const movie = state.movies.find((movie) => movie.slug === slug);

  useEffect(() => {
    fetchMovies(); // G·ªçi l·∫°i fetchMovies khi slug thay ƒë·ªïi

    const fetchUserStatus = async () => {
      const token = localStorage.getItem("token");

      if (token) {
        try {
          // L·∫•y danh s√°ch phim y√™u th√≠ch c·ªßa ng∆∞·ªùi d√πng
          const response = await instance.get("/user", {
       
         
          });
          

          // Ki·ªÉm tra xem phim hi·ªán t·∫°i c√≥ trong danh s√°ch y√™u th√≠ch kh√¥ng
          const isFavorite = response.data.favorite_movies.some((favMovie: any) => favMovie.id === movie?.id);
// console.log("trang thai phim:",isFavorite);

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u th√≠ch
          setUserStatus((prev) => ({
            ...prev,
            isLoggedIn: true,
            isFavorite,
            favoriteMovies: response.data,
          }));
        } catch (error) {
          console.error("Error fetching user favorites:", error);
        }
      }
    };

    fetchUserStatus();
  }, [slug]);
 

 
  const handleFavoriteToggle = async () => {
    const token = localStorage.getItem("token");
  
    if (!token) {
      notification.warning({
        message: "Y√™u c·∫ßu ƒëƒÉng nh·∫≠p",
        description: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m phim v√†o danh s√°ch y√™u th√≠ch!",
      });
      return;
    }
  
    try {
      if (userStatus.isFavorite) {
        // N·∫øu phim ƒë√£ ƒë∆∞·ª£c y√™u th√≠ch, g·ªçi API ƒë·ªÉ x√≥a kh·ªèi danh s√°ch y√™u th√≠ch
        const response = await instance.delete(`/favorites/${movie?.id}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
  
        // Ki·ªÉm tra n·∫øu x√≥a th√†nh c√¥ng
        if (response.status === 200) {
          notification.success({
            message: "Th√†nh c√¥ng",
            description: "Phim ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch y√™u th√≠ch!",
          });
          // console.log("Movie ID to be deleted:", movie?.id);
        } else {
          notification.error({
            message: "L·ªói",
            description: "C√≥ l·ªói x·∫£y ra khi x√≥a phim kh·ªèi danh s√°ch y√™u th√≠ch.",
          });
        }
      } else {
        // N·∫øu phim ch∆∞a ƒë∆∞·ª£c y√™u th√≠ch, g·ªçi API ƒë·ªÉ th√™m v√†o danh s√°ch y√™u th√≠ch
        const response = await instance.post(`/favorites/${movie?.id}`, {}, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
  
        // Ki·ªÉm tra n·∫øu th√™m th√†nh c√¥ng
        if (response.status === 200) {
          notification.success({
            message: "Th√†nh c√¥ng",
            description: "Phim ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch y√™u th√≠ch!",
          });
        } else {
          notification.error({
            message: "L·ªói",
            description: "C√≥ l·ªói x·∫£y ra khi th√™m phim v√†o danh s√°ch y√™u th√≠ch.",
          });
        }
      }
  
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u th√≠ch sau khi th·ª±c hi·ªán th√†nh c√¥ng
      setUserStatus((prev) => ({
        ...prev,
        isFavorite: !prev.isFavorite, // ƒê·ªïi tr·∫°ng th√°i y√™u th√≠ch
      }));
    } catch (error) {
      console.error("Error when toggling favorite:", error);
      notification.error({
        message: "L·ªói",
        description: "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u th√≠ch phim.",
      });
    }
  };
  
  
  

  const handleRatingSubmit = async () => {
    if (!userStatus.isLoggedIn) {
      notification.warning({
        message: "Y√™u c·∫ßu ƒëƒÉng nh·∫≠p",
        description: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√° phim!",
      });
      return;
    }

    try {
      await instance.post("/ratings", {
        movie_id: movie?.id,
        rating: ratingData.rating,
        review: ratingData.review,
      });
      notification.success({
        message: "Th√†nh c√¥ng",
        description: "C·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªÉ l·∫°i ƒë√°nh gi√°!",
      });
      setRatingData({ rating: 0, review: "", isModalVisible: false });
      setUserStatus((prev) => ({ ...prev, isRated: true }));
    } catch {
      notification.error({
        message: "L·ªói",
        description: "C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°.",
      });
    }
  };

  return (
    <>
      <Header />
      <div className="movie-detail-container">
        <div
          className="boxbig"
          style={{
            backgroundImage: `url(${movie?.poster || "https://example.com/default-image.jpg"})`,
          }}
        >
          <div className="info-section">
            <img src={movie?.poster || "placeholder.jpg"} alt={movie?.movie_name} className="poster" />
            <div className="movie-details-wrapper">
              <div className="movie-info-1">
                <h2 className="title">{movie?.movie_name}</h2>
                <p className="genre">
                  Th·ªÉ lo·∫°i: {movie?.movie_category?.map((cat: any) => cat.category_name).join(", ") || "Kh√¥ng c√≥ th·ªÉ lo·∫°i"}
                </p>

             <div className="actions-1 row row-cols-2 row-cols-md-4 g-3">
  {/* Th√≠ch */}
  <div className="col text-center">
    <button className="btn btn-outline-danger w-100" onClick={handleFavoriteToggle}>
      {userStatus.isFavorite ? "‚ù§Ô∏è" : "ü§ç"} <span>Th√≠ch</span>
    </button>
  </div>

  {/* ƒê√°nh gi√° */}
  <div className="col text-center">
    <button className="btn btn-outline-warning w-100" onClick={() => setRatingData((prev) => ({ ...prev, isModalVisible: true }))}>
      <FontAwesomeIcon icon={faStar} color={userStatus.isRated ? "#FFD700" : "#ccc"} />
      <span className="danhgia"> ƒê√°nh gi√° </span>
    </button>
  </div>

  {/* Trailer */}
  <div className="col text-center">
    <button className="btn btn-outline-primary w-100" onClick={() => setIsTrailerVisible(true)}>
      Trailer
    </button>
  </div>

  {/* Mua v√© */}
  <div className="col text-center">
    <Link to={`/buy-now/${slug}`} className="btn btn-outline-success w-100">
      Mua v√©
    </Link>
  </div>
</div>


                <p className="description">{stripHtml(movie?.description || "Kh√¥ng c√≥ m√¥ t·∫£")}</p>

                <div className="movie-details">
                  <div>üìÖ Kh·ªüi chi·∫øu: {movie?.release_date ? format(new Date(movie.release_date), 'dd/MM/yyyy') : 'Ch∆∞a c√≥ ng√†y ph√°t h√†nh'}</div>
                  <div>‚è∞ Th·ªùi l∆∞·ª£ng: {movie?.duration || "Ch∆∞a c√≥ th·ªùi l∆∞·ª£ng"} ph√∫t</div>
                  <div>üîû Gi·ªõi h·∫°n tu·ªïi: {movie?.age_limit ? `${movie.age_limit}` : "Kh√¥ng c√≥ gi·ªõi h·∫°n tu·ªïi"}</div>
                </div>
              </div>

              <div className="additional-info">
                <strong>Di·ªÖn vi√™n:</strong>
                <p>{movie?.actor?.map((actor: any) => actor.actor_name).join(", ") || "Kh√¥ng c√≥ di·ªÖn vi√™n"}</p>

                <strong>ƒê·∫°o di·ªÖn:</strong>
                <p>{movie?.director?.map((director: any) => director.director_name).join(", ") || "Kh√¥ng c√≥ ƒë·∫°o di·ªÖn"}</p>
              </div>
            </div>
          </div>
        </div>

        <div className="tabs">
            <Link to={`/movie-detail/${slug}`} className={`tab ${location.pathname === `/movie-detail/${slug}` ? "active" : ""}`}>
              Th√¥ng tin phim
            </Link>
            <Link to={`/schedule/${slug}`} className={`tab ${location.pathname === `/schedule/${slug}` ? "active" : ""}`}>
              L·ªãch chi·∫øu
            </Link>
            <Link to={`/reviews/${slug}`} className={`tab ${location.pathname === `/reviews/${slug}` ? "active" : ""}`}>
              ƒê√°nh gi√°
            </Link>
            <Link to={`/news/${slug}`} className={`tab ${location.pathname === `/news/${slug}` ? "active" : ""}`}>
              Tin t·ª©c
            </Link>
            <Link to={`/buy-now/${slug}`} className={`tab ${location.pathname === `/buy-now/${slug}` ? "active" : ""}`}>
              Mua v√©
            </Link>
          </div>
      </div>

      {/* Modal ƒê√°nh Gi√° */}
      <Modal title="ƒê√°nh gi√° phim" open={ratingData.isModalVisible} onOk={handleRatingSubmit} onCancel={() => setRatingData({ ...ratingData, isModalVisible: false })}>
        <div className="danhgiaphim">
          <div className="imgphim">
            <img src={movie?.poster || "placeholder.jpg"} alt={movie?.movie_name} />
          </div>
          <div className="noidungdanhgia">
            <p>H√£y ƒë·ªÉ l·∫°i ƒë√°nh gi√° c·ªßa b·∫°n cho phim {movie?.movie_name}!</p>
            <div className="rating">
              {[...Array(10).keys()].map((i) => (
                <FontAwesomeIcon key={i} icon={faStar} color={i < ratingData.rating ? "#FFD700" : "#ccc"} onClick={() => setRatingData((prev) => ({ ...prev, rating: i + 1 }))} style={{ cursor: "pointer" }} />
              ))}
            </div>
            <textarea value={ratingData.review} onChange={(e) => setRatingData((prev) => ({ ...prev, review: e.target.value }))} />
          </div>
        </div>
      </Modal>


    
      <Modal
  title={movie?.movie_name}  // ·∫®n ti√™u ƒë·ªÅ n·∫øu kh√¥ng c·∫ßn
  open={isTrailerVisible}
  onCancel={() => setIsTrailerVisible(false)}
  footer={null}
  centered // Modal xu·∫•t hi·ªán gi·ªØa m√†n h√¨nh
  className="custom-modal"
>
  {movie?.trailer ? (
    <iframe
   
      width="100%"
      height="390px"
      src={movie.trailer}
      title="Trailer"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
      allowFullScreen
      style={{ borderRadius: "10px", border: "none" }} // T√πy ch·ªânh giao di·ªán iframe
    ></iframe>
  ) : (
    <div className="no-trailer">
      <p>Trailer kh√¥ng kh·∫£ d·ª•ng</p>
    </div>
  )}
</Modal>


    </>
  );
};

export default MovieDetail;
